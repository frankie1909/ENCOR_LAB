---
- name: Fetch all security rules from PAN-OS Firewall
  hosts: '{{ target | default("firewall") }}'
  connection: local
  gather_facts: no

  vars:
    device:
      ip_address: '{{ ip_address }}'
      username: '{{ username | default(omit) }}'
      password: '{{ password | default(omit) }}'
      api_key: '{{ api_key | default(omit) }}'

    vsys: 'vsys1'
    rule_base: 'security'

  tasks:
    - name: Fetch all security rules
      paloaltonetworks.panos.panos_op:
        ip_address: '{{ device.ip_address }}'
        username: '{{ device.username }}'
        password: '{{ device.password }}'
        api_key: '{{ device.api_key }}'
        cmd: 'show running security-policy'
      register: result

    - name: Parse security rules XML
      community.general.xml:
        xmlstring: '{{ result.stdout_xml }}'
        xpath: '/response/result/member'
        content: text
      register: security_rules

    - name: Create Python script to convert XML to Markdown
      copy:
        dest: /tmp/xml_to_md.py
        content: |
          import xml.etree.ElementTree as ET
          import sys

          xml_data = sys.stdin.read()
          root = ET.fromstring(xml_data)

          rules = []
          for member in root.findall('.//member'):
              rule = {}
              rule_text = member.text
              lines = rule_text.strip().split('\n')
              rule['name'] = lines[0].split(';')[0].strip('" ')
              for line in lines[1:]:
                  if ':' in line:
                      key, value = line.split(':', 1)
                      rule[key.strip()] = value.strip()
                  else:
                      previous_key = list(rule.keys())[-1]
                      rule[previous_key] += ' ' + line.strip()
              rules.append(rule)

          md_table = "| Rule Name | From Zone | To Zone | Source | Destination | Application/Service | Action |\n"
          md_table += "|-----------|-----------|---------|--------|-------------|----------------------|--------|\n"
          for rule in rules:
              md_table += f"| {rule['name']} | {rule.get('from', 'N/A')} | {rule.get('to', 'N/A')} | {rule.get('source', 'N/A')} | {rule.get('destination', 'N/A')} | {rule.get('application/service', 'N/A')} | {rule.get('action', 'N/A')} |\n"

          print(md_table)

    - name: Run Python script to generate Markdown table
      command: python3 /tmp/xml_to_md.py
      args:
        stdin: '{{ result.stdout_xml }}'
      register: md_output

    - name: Write Markdown table to file
      copy:
        content: "{{ md_output.stdout }}"
        dest: ../configs/security_rules.md

        




        



        
