---
- name: Fetch all security rules from PAN-OS Firewall
  hosts: '{{ target | default("firewall") }}'
  connection: local
  gather_facts: no

  vars:
    device:
      ip_address: '{{ ip_address }}'
      username: '{{ username | default(omit) }}'
      password: '{{ password | default(omit) }}'
      api_key: '{{ api_key | default(omit) }}'

    vsys: 'vsys1'
    rule_base: 'security'

  tasks:
    - name: Fetch all security rules
      paloaltonetworks.panos.panos_op:
        ip_address: '{{ device.ip_address }}'
        username: '{{ device.username }}'
        password: '{{ device.password }}'
        api_key: '{{ device.api_key }}'
        cmd: 'show running security-policy'
      register: result

    - name: Parse security rules XML
      community.general.xml:
        xmlstring: '{{ result.stdout_xml }}'
        xpath: '/response/result/member'
        content: text
      register: security_rules

    - name: Convert security rules to Markdown table
      ansible.builtin.copy:
        content: |
          | Rule Name | From | Source | To | Destination | Action |
          | --- | --- | --- | --- | --- | --- |
          {% for rule in security_rules.matches %}
          {% set rule_lines = rule.member.split('\n') %}
          {% set rule_name = rule_lines[0].split('index:')[0].strip().strip('"') %}
          {% set rule_from = rule_lines[1].split(':', 1)[1].strip() %}
          {% set rule_source = rule_lines[2].split(':', 1)[1].strip() %}
          {% set rule_to = rule_lines[3].split(':', 1)[1].strip() %}
          {% set rule_destination = rule_lines[4].split(':', 1)[1].strip() %}
          {% set rule_action = (rule_lines | select("search", "action") | list)[0].split(':', 1)[1].strip() %}
          | {{ rule_name }} | {{ rule_from }} | {{ rule_source }} | {{ rule_to }} | {{ rule_destination }} | {{ rule_action }} |
          {% endfor %}
        dest: ../configs/security_rules.md
