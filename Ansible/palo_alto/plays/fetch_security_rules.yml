---
- name: Fetch all security rules from PAN-OS Firewall
  hosts: '{{ target | default("firewall") }}'
  connection: local
  gather_facts: no

  vars:
    device:
      ip_address: '{{ ip_address }}'
      username: '{{ username | default(omit) }}'
      password: '{{ password | default(omit) }}'
      api_key: '{{ api_key | default(omit) }}'

    vsys: 'vsys1'
    rule_base: 'security'

  tasks:
    - name: Fetch all security rules
      paloaltonetworks.panos.panos_op:
        ip_address: '{{ device.ip_address }}'
        username: '{{ device.username }}'
        password: '{{ device.password }}'
        api_key: '{{ device.api_key }}'
        cmd: 'show running security-policy'
      register: result

    - name: Save security rules to XML file
      copy:
        content: "{{ result.stdout_xml }}"
        dest: /tmp/security_rules.xml

    - name: Upload XML to Markdown conversion script
      copy:
        dest: /tmp/xml_to_md.py
        content: |
          import xml.etree.ElementTree as ET

          # Load XML data
          tree = ET.parse('/tmp/security_rules.xml')
          root = tree.getroot()

          # Function to parse rule details from text
          def parse_rule_details(rule_text):
              details = {}
              lines = rule_text.strip().split(';')
              details['name'] = lines[0].strip('"')
              for line in lines[1:]:
                  if ':' in line:
                      key, value = line.split(':', 1)
                      details[key.strip()] = value.strip()
              return details

          # Prepare Markdown table
          md_table = "| Rule Name | From Zone | To Zone | Source | Destination | Application/Service | Action |\n"
          md_table += "|-----------|-----------|---------|--------|-------------|----------------------|--------|\n"

          # Parse each rule
          for member in root.findall('.//member'):
              rule_text = member.text
              rule = parse_rule_details(rule_text)
              md_table += f"| {rule.get('name', 'N/A')} | {rule.get('from', 'N/A')} | {rule.get('to', 'N/A')} | {rule.get('source', 'N/A')} | {rule.get('destination', 'N/A')} | {rule.get('application/service', 'N/A')} | {rule.get('action', 'N/A')} |\n"

          # Write Markdown table to file
          with open('/tmp/security_rules.md', 'w') as f:
              f.write(md_table)

    - name: Run XML to Markdown conversion script
      command: python3 /tmp/xml_to_md.py

    - name: Fetch the generated Markdown file
      fetch:
        src: /tmp/security_rules.md
        dest: ./configs/security_rules.md
        flat: yes
